name: build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  cargo-fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: cargo fmt -- --check
  cargo-clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # https://github.com/actions/cache/blob/master/examples.md#rust---cargo
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: cargo clippy -- --deny=warnings
  cargo-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # https://github.com/actions/cache/blob/master/examples.md#rust---cargo
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: cargo test
  cargo-build:
    strategy:
      matrix:
        platform:
          - linux-amd64
          - linux-arm64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # https://github.com/actions/cache/blob/master/examples.md#rust---cargo
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - if: matrix.platform == 'linux-amd64'
        run: |
           sudo apt-get install --no-install-recommends --yes musl-tools
           echo CARGO_BUILD_TARGET=x86_64-unknown-linux-musl >> ${GITHUB_ENV}
      - if: matrix.platform == 'linux-arm64'
        run: |
           sudo apt-get install --no-install-recommends --yes gcc-aarch64-linux-gnu libc6-dev-arm64-cross
           echo CARGO_BUILD_TARGET=aarch64-unknown-linux-musl >> ${GITHUB_ENV}
           echo CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-gnu-gcc >> ${GITHUB_ENV}
      - run: |
          rustup target add ${{ env.CARGO_BUILD_TARGET }}
          cargo build --release
          upx target/${{ env.CARGO_BUILD_TARGET }}/release/git-lfs-cache
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}
          path: target/${{ env.CARGO_BUILD_TARGET }}/release/git-lfs-cache
  test:
    needs: cargo-build
    strategy:
      matrix:
        target:
          - filesystem
          - http
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: linux-amd64
      - run: chmod +x git-lfs-cache
      - if: matrix.target == 'filesystem'
        run: |
           bash test.bash git-lfs-cache --cache='{"filesystem": {"dir": "/tmp/cache"}}'
      - if: matrix.target == 'http'
        run: |
           sudo tee /etc/nginx/sites-enabled/default << 'EOD'
           server {
             listen 80 default_server;
             listen [::]:80 default_server;
             location / {
                alias /tmp/cache;
                dav_methods PUT;
             }
           }
           EOD
           mkdir /tmp/cache
           sudo systemctl restart nginx.service
           bash test.bash git-lfs-cache --cache='{"http": {"endpoint": "http://localhost/"}}'
  docker:
    if: github.ref == 'refs/heads/main'
    needs: cargo-build
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: linux-amd64
      - run: |
          cat << 'EOD' > Dockerfile
          FROM alpine
          RUN apk add --no-cache ca-certificates git git-lfs
          COPY --chmod=755 git-lfs-cache /usr/local/bin/
          EOD
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/hakuyume/git-lfs-cache:${{ github.sha }}
            ghcr.io/hakuyume/git-lfs-cache
  oras:
    if: github.ref == 'refs/heads/main'
    needs: cargo-build
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: linux-amd64
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - run: |
          oras push ghcr.io/hakuyume/git-lfs-cache:${{ github.sha }}-oras git-lfs-cache
          oras push ghcr.io/hakuyume/git-lfs-cache:oras git-lfs-cache
